; Grades for assignment 1.
(require (lib "list.ss" "srfi" "1"))

(define (select l . args)
  (map (lambda (x) (list-ref l x)) (map sub1 args)))

(define students
  ; Name             SSN   Partner Contract   Assn1 JournalCheck Assn2
  `(("Alex Rockwell" 4531 "Collatos" #t 1 #t #f)
    ("Andres Tejeda" 8635 "A Chan" #t 1 #t 7)
    ("Elevinion Riojas" 2375 "Yaich" #t 3 #f 9)
    ("Binh Le" 8536 "Flores" #t 3 #t 3)
    ("Mike Burns" 9164 "Nguyen" #t #f #t 7)
    ("Tung Nguyen" 4143 "Burns" #t 3 #t 7)
    ("Steven Collatos" 5906 "Rockwell" #t 3 #t #f)
    ("Paul Briggs" 4889 "Champeau" #t 3 #f #f)
    ("Martin Fowler" 9725 "Nutter-Upham" #t 3 #t 2)
    ("Zach Joreess" 9607 "Barthle" #t 3 #t 3)
    ("John Sullivan" 3929 "S Chan" #t 0 #f 6)
    ("Reuben Tabue" 3170 "Wong" #t 4 #t #f)
    ("Avinash Chan" 877 "Tejeda" #t 4 #t 7)
    ("Eric Blomquist" 6397 "Lok" #t 4 #t 6)
    ("Erik Lok" 1720 "Blomquist" #t #f #t 6)
    ("Marc Champeau" 8767 "Briggs" #t 4 #f #f)
    ("Andrew Nutter-Upham" 80 "Fowler" #t 4 #t 2)
    ("Edward Lau" 3208 "Brothwell" #t 4 #t 6)
    ("William Brothwell" 9945 "Lau" #t #f #t 6)
    ("David Oktay" 2368 "Kennedy" #t 4 #t 6 )
    ("Chris Lambert" 1959 "Langworth" #t 4 #t #f)
    ("William SG McCarthy" 4624 "Markowsky" #t 4 #t 9)
    ("Andrew Sward" 9726 "Martin" #t 4 #t ?)
    ("Christopher Barthle" 9206 "Joress" #t 4 #t 3)
    ("Jason Martin" 9378 "Sward" #t 4 #t ?)
    ("Elyes Yaich" 9055 "Riojas" #t 4 #t 9)
    ("Siu Kin Chan" 3962 "Sullivan" #t 5 #t 6) 
    ("John Kennedy" 4030 "Oktay" #t 5 #t 6)
    ("Juan Flores" 1403 "Le" #t 5 #t 3)
    ("Josiah Wong" 3244 "Taube" #t 5 #t #f)
    ("Daniel A. Suchy" 2006 "Vulner" #t 5 #t 11)
    ("John Paul Casiello" 7320 "Bubrowski" #t 5 #t #f)
    ("John Vulner" 2212 "Suchy" #t 5 #t 11)
    ("Ian Langsworth" 5576 "Lambert" #t 5 #t #f)
    ("Peter Markowsy" 4173 "McCarthy" #t 5 #t 9)
    ("Stanley Bubrowski" 3061 "Casiello" #t #f #t #f)
    )
  )

(define-values (get-name get-ssn get-partner get-cnt)
  (apply values
         (map (lambda (n) (lambda (x) (list-ref x n)))
              (list 0 1 2 3 ))))

(define (get-assn n)
  (lambda (x)
    (list-ref  (drop x 4) (sub1 n))))

(define no-cnt (filter (lambda (x) (not (get-cnt x))) students))
(define (no-assn n) (filter (lambda (x) (not ((get-assn n) x))) students))
(define no-partner (filter (lambda (x) (eq? (get-partner x) '?)) students))
(define no-ssn (filter (lambda (x) (eq? (get-ssn x) '?)) students))

(define (select-random l)
  (let ((len (length l)))
    (list-ref l (random len))))

(define (students-selected)
  `((("Suchy" "Vulner") 
     ("Fowler" "Barthle" "Joress")
     ("Le" "Flores")
     ("Sullivan" "Tejeda" "Blomquist"))
    ))