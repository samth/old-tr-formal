* Preliminaries
	Any Questions?
	Announcements:
		???

* Brief Union Review
	Data Definition
	Template

* Shopping list example:
	What's the simplest shopping list?
		zero element shopping list.
		(define-struct empty-shop-list ())
	Program that counts the number of elements.
	(define (count-items a-shop-list)
		0)
	
	What if we want to buy something:
		one element list
		(define-struct shop-list1 (item))

	What if we want to buy more than one thing:
		(define-struct shop-list2 (item1 item2))

* Unions of lists:
	What if we have a shopping list?  What is the data def?

	A Shopping List is one of
		- (make-empty-shop-list)
		- (make-shop-list1 String)
		- (make-shop-list2 String String)

	How do we count the elements?

	Examples.

	What is our template?

	(define (shop-template sl)
	  (cond
	    [(empty-shop-list? sl) ...]
	    [(shop-list1? sl) ...]
	    [(shop-list2? sl) ...]))

	What is the function?

	(define (count-items sl)
	  (cond
	    [(empty-shop-list? sl) 0]
	    [(shop-list1? sl) 1]
	    [(shop-list2? sl) 2]))

* What's the problem? 

	This won't work.  Why?

	Doesn't scale.  How could we have 100 elements?  What if we then wanted 101?

	Call for ideas here.  Try to lead students in the right directions.

	A solution:  one-more-item:

	(define-struct one-more-item ????)

	What do we put here?

	(define-struct one-more-item (new-item old-items))

	But what is the data definition - What is old-items?

	It's a Shopping List.  But one-more-item is a Shopping List.
	So one-more-item contains something like itself.

	So, how big of a shopping list can we now construct?

	Do we still need all of those structs?

	Construct examples.

* Data definition for Shopping List

	A shopping list is either:
	- (make-empty-shop-list)
	- (make-one-more-item String ShoppingList)

	Note recursiveness - draw arrow!

* Functions that process ShoppingLists

	What if we want the number of items in a shopping list?  
	How do we construct that function?

	Contract.

	Examples.

	Template.

	(define (num-items sl)
	  (cond
	    [(one-more-item? sl) ...]
	    [else ...]))

	What do we put in the blanks?
