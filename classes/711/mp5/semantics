CEK Machine rules for cond
--------------------------

(cond e_1 => e_2 ... e_n-1 => e_n, p, E) -> 
	(e1, p, E o cond [] => e2p ... e_n-1p => e_np)
(true, E o cond [] => e_2p ... => e_np) -> 
	(e_2, p, E)
(false, E o cond [] => e_2p e_3p => e_4p ... e_n-1 => e_n) -> 
	(cond e3 => e4 ... e_n-1 => e_n, p, E)

CEK Machine rules for let*
--------------------------

(let* x1 = e1 ... in e, p, E) ->
	(let x1 = e1 in let* ... in e, p, E)

(let* in e, p, E) -> (let in e, p, E)

CEK Machine rules for try .. catch (or recover-from-errors-with)
----------------------------------

(try e catch e', p, E) ->
	(e, p, E o try [] catch e'p)
(v, E o try [] catch ep) -> (v, E)
(error, E o try [] catch ep) -> (e, p, E)
(error, E o F) -> (error, E)
(error, []) -> 99
