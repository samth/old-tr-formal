Problem 1:

Use an array of size V, creation of which obviously takes time O(V).  
Then iterate through all the edges, and index into the array with the 
number of the vertex.  Make a mark with the number of the current
vertex.  If such a mark is already there, don't put the edge in the
new graph.  Iterating through all the edges takes time O(E).  

Problem 4: 

For both parts, use the following graph:

t <-- u <-- v

And perform DFS in the order t, u, v.

Then the DFS tree is just the three singleton nodes.  Then no node is
a descendant of any other, and all nodes are singletons.

Problem 5:

If the graph has cycles, eventually there will be no vertices with no
in-edges.  




